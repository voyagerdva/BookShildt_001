Classfile /E:/__PROJECT__/JAVA/BookShildt_001/out/production/BookShildt_001/e0027_OverloadMethods/OverloadDemo.class
  Last modified 24 окт. 2022 г.; size 1340 bytes
  SHA-256 checksum 584736b95bd7226eac693f7621b51a655da2eadd47491677c810f946d1b34983
  Compiled from "OverloadDemo.java"
public class e0027_OverloadMethods.OverloadDemo
  minor version: 0
  major version: 61
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #28                         // e0027_OverloadMethods/OverloadDemo
  super_class: #2                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 4, attributes: 3
Constant pool:
   #1 = Methodref          #2.#3          // java/lang/Object."<init>":()V
   #2 = Class              #4             // java/lang/Object
   #3 = NameAndType        #5:#6          // "<init>":()V
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Fieldref           #8.#9          // java/lang/System.out:Ljava/io/PrintStream;
   #8 = Class              #10            // java/lang/System
   #9 = NameAndType        #11:#12        // out:Ljava/io/PrintStream;
  #10 = Utf8               java/lang/System
  #11 = Utf8               out
  #12 = Utf8               Ljava/io/PrintStream;
  #13 = String             #14            // Параметры отсутствуют
  #14 = Utf8               Параметры отсутствуют
  #15 = Methodref          #16.#17        // java/io/PrintStream.println:(Ljava/lang/String;)V
  #16 = Class              #18            // java/io/PrintStream
  #17 = NameAndType        #19:#20        // println:(Ljava/lang/String;)V
  #18 = Utf8               java/io/PrintStream
  #19 = Utf8               println
  #20 = Utf8               (Ljava/lang/String;)V
  #21 = InvokeDynamic      #0:#22         // #0:makeConcatWithConstants:(II)Ljava/lang/String;
  #22 = NameAndType        #23:#24        // makeConcatWithConstants:(II)Ljava/lang/String;
  #23 = Utf8               makeConcatWithConstants
  #24 = Utf8               (II)Ljava/lang/String;
  #25 = InvokeDynamic      #1:#26         // #1:makeConcatWithConstants:(D)Ljava/lang/String;
  #26 = NameAndType        #23:#27        // makeConcatWithConstants:(D)Ljava/lang/String;
  #27 = Utf8               (D)Ljava/lang/String;
  #28 = Class              #29            // e0027_OverloadMethods/OverloadDemo
  #29 = Utf8               e0027_OverloadMethods/OverloadDemo
  #30 = Utf8               Code
  #31 = Utf8               LineNumberTable
  #32 = Utf8               LocalVariableTable
  #33 = Utf8               this
  #34 = Utf8               Le0027_OverloadMethods/OverloadDemo;
  #35 = Utf8               test
  #36 = Utf8               (II)V
  #37 = Utf8               a
  #38 = Utf8               I
  #39 = Utf8               b
  #40 = Utf8               (D)V
  #41 = Utf8               D
  #42 = Utf8               SourceFile
  #43 = Utf8               OverloadDemo.java
  #44 = Utf8               BootstrapMethods
  #45 = MethodHandle       6:#46          // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #46 = Methodref          #47.#48        // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #47 = Class              #49            // java/lang/invoke/StringConcatFactory
  #48 = NameAndType        #23:#50        // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #49 = Utf8               java/lang/invoke/StringConcatFactory
  #50 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #51 = String             #52            // a & b: \u0001 \u0001
  #52 = Utf8               a & b: \u0001 \u0001
  #53 = String             #54            // Внутреннее преобразование при вызове test(double) a: \u0001
  #54 = Utf8               Внутреннее преобразование при вызове test(double) a: \u0001
  #55 = Utf8               InnerClasses
  #56 = Class              #57            // java/lang/invoke/MethodHandles$Lookup
  #57 = Utf8               java/lang/invoke/MethodHandles$Lookup
  #58 = Class              #59            // java/lang/invoke/MethodHandles
  #59 = Utf8               java/lang/invoke/MethodHandles
  #60 = Utf8               Lookup
{
  public e0027_OverloadMethods.OverloadDemo();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Le0027_OverloadMethods/OverloadDemo;

  void test();
    descriptor: ()V
    flags: (0x0000)
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #13                 // String Параметры отсутствуют
         5: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: return
      LineNumberTable:
        line 5: 0
        line 6: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Le0027_OverloadMethods/OverloadDemo;

  void test(int, int);
    descriptor: (II)V
    flags: (0x0000)
    Code:
      stack=3, locals=3, args_size=3
         0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;
         3: iload_1
         4: iload_2
         5: invokedynamic #21,  0             // InvokeDynamic #0:makeConcatWithConstants:(II)Ljava/lang/String;
        10: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        13: return
      LineNumberTable:
        line 9: 0
        line 10: 13
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      14     0  this   Le0027_OverloadMethods/OverloadDemo;
            0      14     1     a   I
            0      14     2     b   I

  void test(double);
    descriptor: (D)V
    flags: (0x0000)
    Code:
      stack=3, locals=3, args_size=2
         0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;
         3: dload_1
         4: invokedynamic #25,  0             // InvokeDynamic #1:makeConcatWithConstants:(D)Ljava/lang/String;
         9: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        12: return
      LineNumberTable:
        line 13: 0
        line 14: 12
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Le0027_OverloadMethods/OverloadDemo;
            0      13     1     a   D
}
SourceFile: "OverloadDemo.java"
BootstrapMethods:
  0: #45 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #51 a & b: \u0001 \u0001
  1: #45 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #53 Внутреннее преобразование при вызове test(double) a: \u0001
InnerClasses:
  public static final #60= #56 of #58;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
#############################################################################################
package e0027_OverloadMethods;

public class OverloadDemo {
    void test() {
        System.out.println("РџР°СЂР°РјРµС‚СЂС‹ РѕС‚СЃСѓС‚СЃС‚РІСѓСЋС‚");
    }

    void test(int a, int b) {
        System.out.println("a & b: " + a + " " + b);
    }

    void test(double a) {
        System.out.println("Р’РЅСѓС‚СЂРµРЅРЅРµРµ РїСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРµ РїСЂРё РІС‹Р·РѕРІРµ "+ "test(double) a: " + a);
    }
}
---------------------------------------------------------------------------------------------
